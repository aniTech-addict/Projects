#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>

// Global declarations for the Tic-Tac-Toe board and player/computer symbols
char gameBoard[3][3];
const char HUMAN = 'X';
const char AI = 'O';

// Function declarations
void initializeBoard();
void displayBoard();
int availableSpaces();
void humanMove();
void aiMove();
char findWinner();
void showResult(char);

int main() {
    char currentWinner = ' ';
    char replayChoice = ' ';

    // Game loop to allow replaying
    do {
        currentWinner = ' ';
        replayChoice = ' ';
        initializeBoard();

        // Main game loop
        while (currentWinner == ' ' && availableSpaces() > 0) {
            displayBoard();

            humanMove();
            currentWinner = findWinner();
            if (currentWinner != ' ' || availableSpaces() == 0) {
                break;
            }

            aiMove();
            currentWinner = findWinner();
            if (currentWinner != ' ' || availableSpaces() == 0) {
                break;
            }
        }

        displayBoard();
        showResult(currentWinner);

        printf("\nPlay again? (Y/N): ");
        scanf(" %c", &replayChoice);
        replayChoice = toupper(replayChoice);
    } while (replayChoice == 'Y');

    printf("Thanks for playing!\n");
    return 0;
}

// Function to reset the board to the initial state
void initializeBoard() {
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            gameBoard[row][col] = ' ';
        }
    }
}

// Function to display the current state of the game board
void displayBoard() {
    printf(" %c | %c | %c ", gameBoard[0][0], gameBoard[0][1], gameBoard[0][2]);
    printf("\n---|---|---\n");
    printf(" %c | %c | %c ", gameBoard[1][0], gameBoard[1][1], gameBoard[1][2]);
    printf("\n---|---|---\n");
    printf(" %c | %c | %c ", gameBoard[2][0], gameBoard[2][1], gameBoard[2][2]);
    printf("\n");
}

// Function to check how many spaces are still available
int availableSpaces() {
    int openSpots = 9;
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            if (gameBoard[row][col] != ' ') {
                openSpots--;
            }
        }
    }
    return openSpots;
}

// Function for player's move input
void humanMove() {
    int row, col;
    do {
        printf("Choose row (1-3): ");
        scanf("%d", &row);
        row--;  // Adjust for array index

        printf("Choose column (1-3): ");
        scanf("%d", &col);
        col--;  // Adjust for array index

        if (gameBoard[row][col] != ' ') {
            printf("Spot already taken, try again.\n");
        } else {
            gameBoard[row][col] = HUMAN;
            break;
        }
    } while (gameBoard[row][col] != ' ');
}

// Function to handle computer's move
void aiMove() {
    srand(time(0));
    int row, col;

    if (availableSpaces() > 0) {
        do {
            row = rand() % 3;
            col = rand() % 3;
        } while (gameBoard[row][col] != ' ');

        gameBoard[row][col] = AI;
    } else {
        showResult(' ');
    }
}

// Function to check if there's a winner or a tie
char findWinner() {
    // Check rows and columns for a win
    for (int i = 0; i < 3; i++) {
        if (gameBoard[i][0] == gameBoard[i][1] && gameBoard[i][0] == gameBoard[i][2]) {
            return gameBoard[i][0];
        }
        if (gameBoard[0][i] == gameBoard[1][i] && gameBoard[0][i] == gameBoard[2][i]) {
            return gameBoard[0][i];
        }
    }
    // Check diagonals for a win
    if (gameBoard[0][0] == gameBoard[1][1] && gameBoard[0][0] == gameBoard[2][2]) {
        return gameBoard[0][0];
    }
    if (gameBoard[0][2] == gameBoard[1][1] && gameBoard[0][2] == gameBoard[2][0]) {
        return gameBoard[0][2];
    }

    // No winner yet
    return ' ';
}

// Function to print the result of the game
void showResult(char winner) {
    if (winner == HUMAN) {
        printf("Congrats, you won!\n");
    } else if (winner == AI) {
        printf("You lost! Better luck next time!\n");
    } else {
        printf("It's a tie!\n");
    }
}
